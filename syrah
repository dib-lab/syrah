#! /usr/bin/env python
"""
Consume FASTA/FASTQ on stdin and output trusted subsequences.

See: https://github.com/dib-lab/syrah

Copyright (c) 2016, The Regents of the University of California.
"""
from __future__ import print_function
import sys
import argparse
import screed
import khmer
from khmer import Counttable, HLLCounter, khmer_args
from khmer import utils as khmer_utils

DEFAULT_N = 1e6
DEFAULT_FP = 0.05
DEFAULT_K = 21
WATERMARK_SIZE = 1e6

NORMALIZE_TO = 10
TRUSTED_CUTOFF = 5

_be_quiet = False
def notify(s, *args, **kwargs):
    "A simple logging function => stderr."
    if not _be_quiet:
        print(s.format(*args, **kwargs), file=sys.stderr)


def error(s, *args, **kwargs):
    "A simple logging function => stderr."
    print(s.format(*args, **kwargs), file=sys.stderr)


def trusted_regions(seq, errors_at, minsize):
    "Break sequences into subsequences at errors, yield subsequences."
    if not errors_at:
        yield seq

    start = 0
    for pos in errors_at:
        if pos == start:
            pass
        else:
            if pos - start >= minsize:
                yield seq[start:pos]
        start = pos + 1

    end = len(seq)
    if start - end >= minsize:
        yield seq[start:end]


def run(ct, hll, num_kmers, ksize):
    """
    Read sequences from stdin & yield high-abundance k-mers until num_kmers
    have been found.
    """

    # set up iterator, reporting periods, and counters
    notify('reading sequences from stdin')
    screed_iter = screed.open('/dev/stdin')
    clean_iter = khmer_utils.clean_input_reads(screed_iter)
    watermark = WATERMARK_SIZE
    n_output = 0
    total_seq = 0
    seq_output = 0

    # iterate over input records
    for record in clean_iter:
        total_seq += len(record.sequence)

        # too short a sequence? ignore.
        if len(record.sequence) < ksize:
            continue

        # at each watermark, print status & check cardinality
        if total_seq >= watermark:
            cardinality = hll.estimate_cardinality()

            notify('... consumed {:g} bases, ~{} kmers; output {:g} n bases',
                   watermark, cardinality, seq_output)
            watermark += WATERMARK_SIZE

            # done? if so, exit.
            if cardinality > num_kmers:
                notify('')
                notify('reached {} kmers; success! ending now.',
                       int(num_kmers))
                break

        # for each input sequence, check abundance; if above threshold,
        # break up by errors and print out.
        seq = record.cleaned_seq
        if ct.median_at_least(seq, NORMALIZE_TO):
            errors_at = ct.find_spectral_error_positions(seq, TRUSTED_CUTOFF)

            for subseq in trusted_regions(seq, errors_at, ksize):

                try:
                    sys.stdout.write('>{}\n{}\n'.format(n_output, subseq))
                    n_output += 1
                except:
                    notify('error in writing - exiting.')
                    return 0

                hll.consume_string(subseq)
                seq_output += len(subseq)
        else:                             # if low abundance, just consume
            ct.consume(record.cleaned_seq)

    # post loop, check if we found enough k-mers; exit with an error if not.
    cardinality = hll.estimate_cardinality()
    if cardinality < num_kmers:
        error('reached end of input without finding enough k-mers :(')
        error('(found {}; wanted {})', hll.estimate_cardinality(), num_kmers)
        return -1

    # success!
    return 0


def main():
    global _be_quiet
    parser = argparse.ArgumentParser()
    parser.add_argument('-k', '--ksize', type=int, default=DEFAULT_K)
    parser.add_argument('-F', '--fp-rate', type=float, default=DEFAULT_FP)
    parser.add_argument('-n', '--num-kmers', type=float, default=DEFAULT_N)
    parser.add_argument('-q', '--quiet', action='store_true')
    args = parser.parse_args()

    if args.quiet:
        _be_quiet = True

    notify('')
    notify('syrah!')
    notify('')
    notify('   reading sequences and outputting solid regions until')
    notify('   we have seen ~{} {}-mers.', int(args.num_kmers), args.ksize)
    notify('')

    mem = khmer_args.optimal_size(args.num_kmers, fp_rate=args.fp_rate)
    notify("creating counttable using {} x {} bytes",
           mem.num_htables, mem.htable_size)

    # counttable to store the counts
    ct = Counttable(args.ksize, mem.htable_size, mem.num_htables)

    # HyperLogLog counter to track the number of k-mers (could do this with
    # the Counttable, too, I guess, but I trust HLL more ;).
    hll = HLLCounter(0.01, args.ksize)

    # runme!
    try:
        retval = run(ct, hll, int(args.num_kmers), args.ksize)
    except ValueError as e:
        # this will be triggered by screed on bad input.
        error("** error on input; is it FASTA/FASTQ? quitting **")
        raise
        error("specifically, the error is: '{}'", str(e))
        sys.exit(-1)

    fp_rate = khmer.calc_expected_collisions(ct, True, max_false_pos=.8)
    if fp_rate > 0.8:
        error("khmer counting fp rate unexpectedly high - {:1.3f}.", fp_rate)
        error("there is something unusual about your data.")
        error("don't trust these results.")
        sys.exit(-1)
        
    sys.exit(retval)


if __name__ == '__main__':
    main()
